#pragma once

namespace http {
	constexpr std::size_t MAX_REQUEST_HEADER_SIZE = 8 * 1024; // 8KB

	enum class Header : int {
		ACCEPT_CHARSET,
		ACCEPT_ENCODING,
		ACCEPT_LANGUAGE,
		ACCEPT_RANGES,
		ACCEPT,
		AGE,
		ALLOW,
		AUTHORIZATION,
		CACHE_CONTROL,
		CONNECTION,
		CONTENT_ENCODING,
		CONTENT_LANGUAGE,
		CONTENT_LENGTH,
		CONTENT_LOCATION,
		CONTENT_TYPE,
		DATE,
		ETAG,
		EXPECT,
		EXPIRES,
		FROM,
		HOST,
		IF_MATCH,
		IF_MODIFIED_SINCE,
		IF_NONE_MATCH,
		IF_RANGE,
		IF_UNMODIFIED_SINCE,
		LAST_MODIFIED,
		LOCATION,
		MAX_FORWARDS,
		PRAGMA,
		PROXY_AUTHENTICATE,
		PROXY_AUTHORIZATION,
		RANGE,
		REFERER,
		RETRY_AFTER,
		SERVER,
		TE,
		USER_AGENT,
		VARY,
		WARNING,
		WWW_AUTHENTICATE,
   		CONTENT_RANGE,
   		MIME_VERSION,
   		TRAILER,
   		TRANSFER_ENCODING,
		LENGTH
	};

	enum class StatusCode : std::uint16_t {
		NONE_0 = 0,

		CONTINUE_100 = 100,
		SWITCHING_PROTOCOLS_101 = 101,

		OK_200 = 200,
		CREATED_201 = 201,
		ACCEPTED_202 = 202,
		NON_AUTHORITATIVE_INFORMATION_203 = 203,
		NO_CONTENT_204 = 204,
		RESET_CONTENT_205 = 205,
		PARTIAL_CONTENT_206 = 206,

		MULTIPLE_CHOICES_300 = 300,
		MOVED_PERMANENTLY_301 = 301,
		FOUND_302 = 302,
		SEE_OTHER_303 = 303,
		NOT_MODIFIED_304 = 304,
		TEMPORARY_REDIRECT_307 = 307,
		PERMANENT_REDIRECT_308 = 308,

		BAD_REQUEST_400 = 400,
		UNAUTHORIZED_401 = 401,
		PAYMENT_REQUIRED_402 = 402,
		FORBIDDEN_403 = 403,
		NOT_FOUND_404 = 404,
		METHOD_NOT_ALLOWED_405 = 405,
		NOT_ACCEPTABLE_406 = 406,
		PROXY_AUTHENTICATION_REQUIRED_407 = 407,
		REQUEST_TIMEOUT_408 = 408,
		CONFLICT_409 = 409,
		GONE_410 = 410,
		LENGTH_REQUIRED_411 = 411,
		PRECONDITION_FAILED_412 = 412,
		CONTENT_TOO_LARGE_413 = 413,
		URI_TOO_LONG_414 = 414,
		UNSUPPORTED_MEDIA_TYPE_415 = 415,
		RANGE_NOT_SATISFIABLE_416 = 416,
		EXPECTATION_FAILED_417 = 417,
		UPGRADE_REQUIRED_426 = 426,

		INTERNAL_SERVER_ERROR_500 = 500,
		NOT_IMPLEMENTED_501 = 501,
		BAD_GATEWAY_502 = 502,
		SERVICE_UNAVAILABLE_503 = 503,
		GATEWAY_TIMEOUT_504 = 504,
		HTTP_VERSION_NOT_SUPPORTED_505 = 505
	};
}
